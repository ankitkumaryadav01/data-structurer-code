#include <stdio.h>

// Function to perform matrix addition
void matrixAddition(int rows, int cols, int mat1[rows][cols], int mat2[rows][cols], int result[rows][cols]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = mat1[i][j] + mat2[i][j];
        }
    }
}

// Function to perform matrix subtraction
void matrixSubtraction(int rows, int cols, int mat1[rows][cols], int mat2[rows][cols], int result[rows][cols]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = mat1[i][j] - mat2[i][j];
        }
    }
}

// Function to perform matrix multiplication
void matrixMultiplication(int rows1, int cols1, int rows2, int cols2, int mat1[rows1][cols1], int mat2[rows2][cols2], int result[rows1][cols2]) {
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols2; j++) {
            result[i][j] = 0;
            for (int k = 0; k < cols1; k++) {
                result[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }
}

// Function to perform matrix transpose
void matrixTranspose(int rows, int cols, int mat[rows][cols], int result[cols][rows]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[j][i] = mat[i][j];
        }
    }
}

// Function to display a matrix
void displayMatrix(int rows, int cols, int mat[rows][cols]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d\t", mat[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int mat1[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int mat2[3][3] = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};
    int result[3][3];

    printf("Matrix 1:\n");
    displayMatrix(3, 3, mat1);

    printf("\nMatrix 2:\n");
    displayMatrix(3, 3, mat2);

    // Addition
    matrixAddition(3, 3, mat1, mat2, result);
    printf("\nAddition:\n");
    displayMatrix(3, 3, result);

    // Subtraction
    matrixSubtraction(3, 3, mat1, mat2, result);
    printf("\nSubtraction:\n");
    displayMatrix(3, 3, result);

    // Multiplication
    matrixMultiplication(3, 3, 3, 3, mat1, mat2, result);
    printf("\nMultiplication:\n");
    displayMatrix(3, 3, result);

    // Transpose
    int transposeResult[3][3];
    matrixTranspose(3, 3, mat1, transposeResult);
    printf("\nTranspose of Matrix 1:\n");
    displ
